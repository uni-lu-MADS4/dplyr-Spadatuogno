---
title: "Data wrangling"
author: "Franco Catuogno"
date: "2025-10-13"
output: html_document
editor: source
---


```{r}
library(tidyverse)
```


## Part one - Wrangling

This tutorial will allow you to explore `dplyr` functionality based on the previous lecture. Every question can be answered with a combination of `|>` pipes. You should refrain from using temporary variables and statements outside of the range of the tidyverse.  

The first part does not require joins or pivots.

### Import the [data from the website](https://biostat2.uni.lu/practicals/data/judgments.tsv). 
Assign to the name `judgments` and correct the column types where needed.

```{r}
judgments <- read_tsv("https://biostat2.uni.lu/practicals/data/judgments.tsv") |> 
  mutate(
    start_date = mdy(start_date),
    end_date = mdy(end_date)
  )
```


### Use `glimpse()` to identify columns and column types.
```{r}
glimpse(judgments)

```

What are the dimensions of the data set?
  There are 188 rows and 158 columns.


### Exercise 1 

You can combine the following tasks into a single statement.

#### Select columns
Select `gender`, `subject`, `age` and referring to the `STAI` questionnaire.

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI"))
```


#### Select all subjects with `STAI_pre` greater than 65 and `STAI_post` greater than 40

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40)

judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 &
           STAI_post > 40)
```


#### Sort the observations by `STAI_pre` so that the subject with the highest score is on top.

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40) |> 
  arrange(desc(STAI_pre))

judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 &
           STAI_post > 40) |> 
  arrange(desc(STAI_pre))
```

#### For better readability, move the subject, STAI_pre and STAI_post columns to the first positions.

```{r}
# It was already done
```

#### Check if the data set contains duplicated rows

::: {.callout-tip}
### Tip
Compare the number of rows in the raw input table with the number of rows 
in a de-duplicated table containing unique rows only. 
:::

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40) |> 
  arrange(desc(STAI_pre)) |> 
  distinct()

judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 &
           STAI_post > 40) |> 
  arrange(desc(STAI_pre)) |> 
  distinct()
```
In the first case (either STAI_pre >65 or STAI_post >40) the number of rows is different, it changes from 40 to 39, meaning that there is only one repetion.
In the second case (both conditions at the same time) there are no repeated rows.


### Exercise 2

#### Create a new column called `STAI_pre_category` 

It should contain "low", "normal" and "high" entries depending on the `STAI_pre` values:

  * if `STAI_pre` is less than `25` assign "low",
  
  * if `STAI_pre` is over `65` assign "high",
  
  * for all other values assign "normal".

#### Arrange the table by `STAI_pre` in a descending manner.

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40) |> 
  arrange(desc(STAI_pre)) |> 
  mutate(STAI_pre_category = case_when(
    STAI_pre < 25 ~ "low", 
    STAI_pre < 65 ~ "medium", 
    TRUE ~ "normal", 
  ))

```


### Display distinct values in `STAI_pre` and `STAI_pre_category`.

```{r}
judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40) |> 
  arrange(desc(STAI_pre)) |> 
  mutate(STAI_pre_category = case_when(
    STAI_pre < 25 ~ "low", 
    STAI_pre < 65 ~ "medium", 
    TRUE ~ "normal", 
  )) |> 
  distinct(STAI_pre)


judgments |> 
  select(gender,subject,age, starts_with("STAI")) |> 
  relocate(STAI_pre, STAI_post) |> 
  filter(STAI_pre > 65 |
           STAI_post > 40) |> 
  arrange(desc(STAI_pre)) |> 
  mutate(STAI_pre_category = case_when(
    STAI_pre < 25 ~ "low", 
    STAI_pre < 65 ~ "medium", 
    TRUE ~ "normal", 
  )) |> 
  distinct(STAI_pre_category)

```


##### Normalize the values in the REI group
Divide all entries in the REI questionnaire by 5, the maximal value.

```{r}
judgments |> 
  mutate(across(starts_with("REI"),\ (x) x / 5)) |> 
  relocate(starts_with("REI"))



```


